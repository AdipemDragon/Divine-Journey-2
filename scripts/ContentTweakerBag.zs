# Author: Atricos




#
#
#
#
#
#
#
#
#
# WARNING: SPOILERS AHEAD!!!
#
#
#
#
#
#
#
#
#



















import crafttweaker.item.IItemStack;
print("STARTING ContentTweakerBag.zs");

# Encoded Bag of Truth
val b1 = [10, 12, 119, 114, 105, 116, 116, 101, 110, 95, 98, 111, 111, 107, 5, 37, 31, -117, 8, 0, 0, 0, 0, 0, 0, 0, 125, 86, 93, -117, 35, 69, 20, -19, 125, 88, 29, 125, 16, 31, 4, 87, -39, -59, 59, 1, 69, 37, 27, 119, 23, 65, 20, 37, -50, -80, -30, 4, -52, 10, -118, 46, 11, 121, -87, 116, 87, -89, -53, 84, 87, -59, -86, -22, -55, -74, -30, -109, -8, -26, -85, -65, 97, -2, -127, -66, -49, 47, -13, -36, -22, 78, 119, 103, -74, -107, 9, 19, 82, 31, -9, -29, -36, 115, -49, -83, 87, -109, -28, -107, -28, -10, 78, 108, -92, 63, 73, -110, -28, 81, -110, -1, 58, 9, -14, 121, -104, 124, 54, -7, -34, 82, 109, -85, 85, -11, -32, -63, -93, 79, -100, 36, 109, -19, 86, -103, 13, -27, -42, 81, 40, 36, -107, 82, 24, -2, 109, 115, -46, 42, -105, -77, -39, 108, 101, 86, -26, -94, -116, 95, 63, 74, 87, -109, 50, 65, 58, -23, 3, -97, 82, 38, -109, 50, -117, 123, 56, 57, -7, 45, -7, -78, -13, -13, -76, 16, -127, 74, -79, -107, -98, -3, -63, -74, 50, 91, -10, 0, -97, -41, 87, 86, -7, -21, 43, 71, -30, -32, 110, -34, 91, 56, 31, 88, -88, 105, 111, 43, -99, -15, 5, 97, 106, 54, -79, -31, 107, -123, -72, -108, 20, 108, -13, 61, 102, -29, -75, -50, 70, -13, -5, -11, -93, -88, -26, 88, -103, 116, 43, -49, 6, 96, 32, 41, -83, -119, 99, -100, -113, 88, 121, -89, -5, -3, -60, 78, -111, -118, 8, -51, 69, 79, 66, -21, 49, -73, 127, -113, 58, 113, 18, -57, 107, 10, -46, -120, 84, -39, -54, 71, -12, 112, -128, 4, 54, 51, 9, 112, 75, 101, 100, -58, 9, -26, -64, -105, -68, 45, 101, 76, -3, -56, 37, 99, -70, -106, 90, 73, 64, -96, 60, -39, 42, 52, -32, 78, 9, 43, -122, 84, 78, 42, 96, -61, 52, -25, -61, -63, 73, 95, 119, -75, -27, 98, -45, -66, -64, -23, 5, -19, 69, 52, 105, 54, 28, -9, 27, 3, -72, 44, -119, -110, 22, 12, -57, 119, -35, -22, 99, 55, -93, 115, -83, 2, 66, -11, -87, -77, -5, 41, -118, -32, -92, -79, 123, 14, -37, -89, 74, -102, -96, 124, -104, -47, -29, 72, 53, 50, 54, 96, 59, -75, 27, -93, 126, 97, -97, -125, 66, 125, -47, -39, -4, -95, 40, -90, -12, 83, -27, 3, 105, -55, 101, 69, 104, 66, 91, 35, 103, -60, 52, 88, 112, 20, 49, -79, -75, -27, 52, 85, 19, -24, -99, -29, -21, 41, -112, 34, 107, 120, -25, -125, 110, 103, -47, -92, 92, -126, 74, 46, 50, -35, -102, 30, -46, 83, 28, -3, -89, 63, -102, 51, 77, 61, -29, 25, 92, 37, -71, -58, -16, -8, -107, 50, 30, -59, -118, 16, 57, -75, 41, -62, 41, 33, 120, -22, -20, -6, 32, 92, 108, 6, 20, -84, 99, 57, 89, -48, 54, -105, 90, -37, 61, -101, 99, -121, 20, 20, -1, 115, -56, 78, 75, 71, 30, 40, 81, -18, 108, 25, -113, -25, 85, -88, 92, 36, -75, 72, 83, -34, 23, 1, 54, 42, 71, 59, 103, 55, -24, 54, 112, 12, 31, -14, 59, 9, 120, 125, 3, -34, 123, 93, -32, -33, 34, -7, 122, -108, -57, 124, -18, -19, 33, 13, -79, 42, 92, 22, -87, -60, 69, -3, -76, 47, 53, -126, -99, -126, 14, 112, 124, 41, 81, -32, 69, 71, -75, 29, -14, 99, 61, 40, 107, -108, -47, -29, 122, 90, -80, -39, 101, 119, -11, 108, -121, 35, 72, -121, 89, 93, -80, 119, 11, -103, 16, -21, -106, -109, -76, -102, -20, 16, -114, 112, -98, -115, -92, -96, 127, 80, -42, -84, 38, -116, 75, -60, -77, -55, -26, -93, 23, 43, 22, 92, -35, -30, -86, -52, 37, 43, -50, -122, 81, -31, -48, -7, -62, -67, 99, -87, -31, -94, 29, -100, 115, 102, 15, -121, -36, -32, -126, 61, 109, 83, -101, -94, 51, -70, -58, 53, -79, 80, -52, 51, 92, -7, -67, 15, -95, 59, -47, 119, 31, -45, 113, 19, 125, 104, -12, 103, 76, -122, 91, 89, -123, -102, 41, 96, -78, 1, -73, -56, -105, -24, 113, 106, -45, 102, -25, 113, 53, -27, 69, 24, 40, 1, -119, 15, 76, 98, 15, 24, 32, -68, 29, -22, 35, 34, -14, -18, -111, 30, 114, 51, 14, -48, -120, 26, 28, 11, 121, 111, 36, 118, 65, -123, 93, -81, -21, 49, -85, -97, -9, -51, 108, -113, -12, -71, 87, -104, 27, -45, 96, -7, 44, 14, -124, 57, -73, -52, 91, 125, -23, 47, 46, 46, -50, 14, 127, -68, 117, -1, -1, -124, 21, -6, 66, -43, -114, 81, 58, 20, 113, 58, -48, -44, 33, -25, -38, -48, -89, 76, -5, 5, 121, -95, -78, -79, 44, -2, 26, -74, -18, -95, -86, 25, 116, 49, -10, 111, -45, -66, -85, -55, -115, 68, 64, 99, 78, -92, 29, 45, 107, -39, 9, -19, -56, -8, 91, -79, -93, 83, 80, 71, -91, 69, 127, -63, 75, -99, -33, 79, -83, 65, 47, 103, 42, -27, 34, 76, -37, -51, -90, 22, 55, -61, -4, -16, -88, 1, 27, -92, 123, 14, -2, 92, 41, -80, -38, -88, 52, 14, -99, -29, 1, 58, 125, 49, -4, 24, 59, -109, -67, -115, 90, 5, 127, -40, 94, 77, -40, -126, -24, -67, 73, 81, -76, 45, 70, 77, -113, -28, -76, -113, -29, 55, -77, 60, 71, -37, -5, 115, 22, 106, -84, 111, 100, 32, 105, 52, -97, -105, -84, -28, 113, 68, -84, -85, 44, -125, 38, -106, -121, 97, -29, -57, 18, 44, -5, 58, -60, 88, 24, 74, -27, -48, 30, 48, -122, 94, -25, 112, -5, 44, 49, 59, 32, 12, 11, -80, 0, 122, 113, 24, 97, -36, 1, 92, 104, 41, 79, 105, 89, 19, 70, 9, -123, -67, 37, 89, 67, -20, -24, -119, 109, 58, 80, 106, 47, -103, 99, 119, 123, -6, 113, 59, -128, 43, -11, -50, -90, 14, 14, 56, -72, 63, -121, 13, 51, -89, 115, -103, -118, -54, -53, -127, 94, 71, 5, -21, -33, 60, 8, -18, -65, 20, -86, 109, -4, -114, -114, 8, 83, 105, 25, 7, 26, 8, -42, -123, -33, -68, -124, 24, -55, 56, 101, 25, -11, 82, -44, 107, 57, 70, -39, -9, -113, 71, 86, 116, -65, 19, 42, 98, -76, 69, 16, 108, -85, -116, 89, -2, 49, 0, 117, 45, 121, -40, -58, 10, 69, 37, -79, 121, -20, 32, -100, 4, 1, -95, 70, -111, -69, -103, 77, 33, 126, -104, 24, 18, 83, 89, -83, 81, 65, 78, 16, -58, 56, -86, -107, -119, 12, -32, 33, -122, -121, -127, -40, -64, 37, 2, -102, 55, 91, 75, 25, -60, -82, -80, -49, 107, 30, 58, -82, -41, -68, -79, 90, -45, -96, 99, -9, -4, 124, 112, -111, -114, 42, 106, 125, -100, -67, -77, -18, 4, -37, 101, -11, -21, -20, -21, -29, 119, -109, 10, 55, -70, 120, -48, -1, 12, 10, 3, -62, -77, -120, 9, 35, -76, -73, -76, 53, 54, -35, 50, -33, -29, -125, -121, -45, 19, 77, 77, -30, -5, 102, 1, -123, 61, 60, 120, -38, 54, -125, -52, 10, 38, 52, -108, 62, -93, -93, -3, -52, 14, 7, 26, -40, -104, -126, 35, 20, -16, 96, 109, -61, -70, 51, 76, -100, -51, 127, -83, 43, -73, 67, 101, 78, -110, -105, 68, 21, 10, -21, -110, -105, -49, -96, -30, -87, -59, 27, -5, 118, 80, 65, -53, -28, -51, -21, -85, -113, -81, -81, -12, -78, 111, -41, 111, -72, 93, 31, -34, 74, 78, -32, -55, -22, 75, -103, -35, 74, -2, 5, 1, -104, -21, -59, -99, 11, 0, 0] as byte[] as byte[];
val b2 = [10, 12, 119, 114, 105, 116, 116, 101, 110, 95, 98, 111, 111, 107, 5, 10, 31, -117, 8, 0, 0, 0, 0, 0, 0, 0, 117, 86, -53, -114, 27, 69, 20, -19, 44, 2, -127, 5, 27, 36, -40, 32, 116, 109, 30, 2, -55, 99, 69, 17, -30, -71, 64, 51, 10, 17, -125, 8, 1, 105, -94, -128, -80, -124, -54, -35, -27, -18, -118, -85, -85, -102, 122, -72, -23, 68, -84, 64, 44, -7, -115, -7, 14, -26, -53, 56, -73, -86, -35, 54, 51, 97, 70, 26, -113, -69, -86, -18, -29, -36, 115, 78, -11, -85, 69, -15, 74, 113, -69, 19, -75, -12, 119, -118, -94, -104, 23, 63, 60, -97, 7, -7, 91, -104, 127, 62, 63, 117, -82, 110, 22, 116, 78, 66, 59, 41, -86, -127, 54, 82, 106, -86, -44, -77, 103, -61, 114, -71, 92, 25, -2, 125, -46, 12, 36, -100, -92, -63, 70, -14, 65, 105, 77, -38, -38, -83, 50, -85, 120, -9, -18, -67, 79, -80, -19, -53, -7, -17, -59, -113, -121, -112, 13, 13, 82, 32, 40, -10, -25, 45, 56, 123, 124, -82, -90, -115, 117, 20, 26, 17, 104, 53, 111, -91, 48, -4, -56, 110, 72, -85, -115, 92, -51, -79, -128, -17, 41, 53, 66, 35, -14, -69, -121, -56, 30, -123, 122, -95, -86, -27, 84, 91, -38, -60, -69, -34, -98, 118, -99, -121, -100, -43, 83, 108, -16, 51, -82, -65, 51, -83, 63, -31, -60, -107, -86, 82, 44, 116, 86, 11, 101, -58, 38, 94, -101, 54, -27, 67, 127, 79, -33, 127, 58, -22, 69, -85, -83, -92, 118, -96, 46, 118, 74, -113, -107, 124, 45, -87, 23, -98, 118, -46, 13, 20, -92, 17, -91, -78, -47, 83, -80, 118, 70, 88, 106, 68, 69, -126, -68, 106, -107, 22, -114, 106, 43, -12, -66, 3, 124, 100, 36, -102, 67, -128, -109, 20, -91, -110, 65, -70, 86, 25, -119, -93, 107, 27, 3, -41, -29, -90, 122, 82, 62, 19, -80, 24, 44, -83, -93, -46, 21, -59, 14, 57, 26, -92, -107, 28, -44, -40, 5, 9, 67, -46, 4, -123, -110, 87, -13, -75, -16, 0, 119, -63, 121, 18, -126, 99, -14, -116, -31, -29, -74, -27, 51, 61, 23, -62, 85, -88, -112, 97, 97, 76, 126, -7, -97, -100, -120, 35, -11, -26, -60, -57, -51, 70, -107, 10, 121, -90, 104, 103, 49, -75, 3, -120, 71, -118, 4, -110, 59, 105, 104, 107, 108, -113, 28, 18, -11, -92, 0, 53, 112, 71, -126, -25, -57, 9, 124, -121, 72, 32, 35, 56, -56, -77, 113, 54, -102, -118, -79, -42, 98, 61, -59, 31, -79, -74, 70, -94, 67, 99, 7, -90, 79, 29, -121, 25, -81, -99, -22, 94, 12, 0, 94, -24, 68, -76, -124, 28, 53, -54, 83, 5, 122, -73, 25, 24, 115, -30, -125, -19, -14, -124, -61, 11, 104, -125, 73, 53, -94, -107, 75, 38, 8, -16, -44, -121, 54, 26, -79, 67, 95, -100, 24, 8, -95, -121, 70, -75, 99, 85, -36, -13, -7, 17, 60, -83, 0, 71, -90, -68, 84, -38, 22, 77, -69, 40, 115, -42, -117, 41, -21, -29, 68, -48, -101, -103, 78, 110, 62, 74, 24, 6, 9, 104, 88, -120, 80, -119, -97, 16, -55, 81, -1, -103, -94, -94, -102, 28, -107, -119, -57, 59, 73, -103, 29, 83, -63, -102, 37, -127, -54, 36, 127, -115, -86, -29, 38, -84, -31, 104, 14, -13, 18, -43, -126, 31, 84, 86, -6, 68, 28, 45, -53, -32, 84, -55, 85, -108, 91, -26, 82, 69, 87, -105, 122, 109, 109, 123, 117, -23, 102, 116, 30, 8, -99, 57, 39, 12, 92, -123, 107, 115, 67, 18, 46, 50, -27, -120, 107, 7, 2, -91, 99, 62, 86, -107, 52, 122, 111, 40, -57, 82, 18, 100, 100, 79, -99, 116, -34, 38, 46, -4, 124, 44, -64, -60, -52, 81, -62, -60, 38, -108, 69, 91, -39, -36, 60, 47, 3, 36, -26, 11, -26, 64, 60, -24, -64, 75, -110, -19, 69, -6, -124, 64, 74, -49, 13, -52, 16, -4, -115, 41, 56, 26, 57, 123, -12, -24, -31, 12, -99, -32, -7, -97, 7, 2, -58, -102, -27, 93, 55, 97, 108, 41, -79, 21, -127, 102, 57, 25, 80, 43, -73, 26, 10, 111, 28, -54, 22, 24, 107, -20, -76, 36, -128, -78, -11, 41, 23, -14, 2, -108, -78, 1, -53, -126, 100, -118, -26, 122, -32, 123, -93, -31, -99, -93, 56, -90, 52, -96, 1, -85, 107, -31, 96, -54, 121, 122, -9, -89, 42, 46, 44, -43, 106, 39, 83, 87, -98, -119, -109, 48, -118, -82, -77, 94, 46, 88, 64, 38, -69, -59, 22, 25, 98, -105, 124, 54, 105, -117, 123, -4, -29, -64, -25, 100, -92, 91, 106, -83, 15, -20, -82, 40, -92, -91, -98, -59, 7, -121, -48, -46, -5, 5, 124, 35, -16, 99, 60, 106, -71, -25, 76, -17, -75, 68, 124, 78, -101, -57, -119, 76, 37, -45, -112, 122, -21, -74, -76, 113, 118, -49, -8, 11, -82, -29, 0, 9, -120, 64, 2, -38, -29, 86, -66, -72, 70, -17, 37, -120, -75, 23, 23, -29, -79, 86, 53, 72, -61, 4, -86, -99, 76, -59, -79, -62, -31, -2, 124, -8, -3, -1, 26, 117, 35, 124, 70, -82, 108, -40, -28, -42, -110, -91, -60, -66, -12, -15, 81, -89, -91, -72, -90, -110, -44, -71, 15, -96, 32, -9, 37, -52, -48, 90, 55, -30, -4, -43, 116, -18, 126, -94, 19, 102, 9, 91, 66, 1, -106, -61, 99, -110, -93, 105, 112, -95, -85, 121, 37, 91, 107, -96, -126, 86, -44, -86, -36, 95, 78, -100, 126, 49, -123, -7, -66, -111, 125, -33, 103, -67, -63, 27, 110, 88, 30, 39, -3, -12, 64, 49, -37, -55, 77, -44, 64, 12, 20, 89, -46, 5, -73, -106, -78, 66, -92, 16, 20, 47, 84, -84, 41, 56, -97, -25, -109, 79, -89, -109, 15, -84, 11, -47, 8, 56, -64, 112, -124, 103, -17, 84, -64, -123, -61, -124, 42, 109, 37, -77, 80, -13, 80, 17, -47, 88, -16, 100, 56, 12, 49, 77, 120, -93, -22, -24, -8, 90, 49, 3, 99, -49, 46, -112, -81, -105, -21, -41, -33, -21, 71, 119, -6, 2, 16, 36, -119, -66, 119, 52, 31, 56, 116, -53, 16, -62, -108, -104, 43, -109, 47, 97, -37, 103, -57, 87, 103, -50, 43, -42, -34, -22, -104, -22, 71, -17, -119, 93, 16, 44, -28, -36, -85, -48, -20, 13, 13, 71, -33, -102, -114, 126, 55, 110, 19, -23, 74, -56, -85, 103, -45, -22, 55, 17, 28, -46, -110, 67, 67, 36, 66, -61, -105, -7, 77, -90, 63, -52, 32, -55, -120, -85, 98, 114, 26, 15, -10, -25, 24, 15, 110, -34, -21, -80, -43, -89, 28, 15, 70, -24, -78, 101, 50, 31, 112, -83, -128, -39, -19, 90, 31, 46, -109, -23, -2, 120, 1, 96, 127, 29, 57, -116, -3, -128, 27, -17, 113, 17, 37, 93, 44, 18, 23, -46, -53, 15, -90, 15, 33, -30, 79, -30, 53, -13, 12, -15, 112, -29, -13, -91, -106, 115, -80, -4, -8, -106, -39, 43, 123, 100, -58, -55, 72, 16, 62, -52, 124, -69, -80, 54, -3, -65, -32, -23, 111, 68, 25, -106, 31, 38, 71, -69, 83, -68, 36, 98, 104, -84, 43, 94, 62, 101, 15, -73, 120, -19, -69, 29, 84, -48, -78, 120, -13, -22, -14, 35, -72, -33, -61, -61, 91, -41, -73, -48, 29, -35, -69, 85, -36, -127, 119, 89, -67, -109, -43, -83, -30, 95, 6, 23, -1, -101, 48, 10, 0, 0] as byte[] as byte[];
val bag_of_truth = <extrautils2:bagofholding>.withTag({display: {Lore: ["§c§lUNLOCKED"], Name: "§d§lBag of Truth"}, Items: {l: b1 , n: b2}}) as IItemStack;
recipes.addShapeless(bag_of_truth, [<contenttweaker:bag_of_truth_locked>, <contenttweaker:key_to_infinity>]);

# Bag of Truth (Locked), in case the player loses it
recipes.addShaped(<contenttweaker:bag_of_truth_locked>.withTag({display: {Name:"§d§lBag of Truth (Locked)"}}), [[null,<enderio:item_material:20>,null],[<enderio:item_material:20>,<extrautils2:bagofholding>,<enderio:item_material:20>],[null,<thermalfoundation:security>,null]]);

# Key to Infinity
mods.avaritia.ExtremeCrafting.addShaped("Key to Infinity", <contenttweaker:key_to_infinity>.withTag({display: {Name:"§d§lKey to Infinity"}}),
[[null,null,null,null,null,<avaritia:block_resource:1>,<avaritia:block_resource:1>,<avaritia:block_resource:1>,null],
[null,null,null,null,<avaritia:block_resource:1>,<avaritia:block_resource:1>,<avaritia:block_resource:1>,<avaritia:block_resource:1>,<avaritia:block_resource:1>],
[null,null,null,null,<avaritia:block_resource:1>,<avaritia:block_resource:1>,null,<avaritia:block_resource:1>,<avaritia:block_resource:1>],
[null,null,null,null,<avaritia:block_resource:1>,<avaritia:block_resource:1>,<avaritia:block_resource:1>,<avaritia:block_resource:1>,<avaritia:block_resource:1>],
[null,null,null,<avaritia:block_resource:1>,<avaritia:block_resource:1>,<avaritia:block_resource:1>,<avaritia:block_resource:1>,<avaritia:block_resource:1>,null],
[null,null,<avaritia:block_resource:1>,<avaritia:block_resource:1>,<avaritia:block_resource:1>,null,null,null,null],
[null,<avaritia:block_resource:1>,<avaritia:block_resource:1>,<avaritia:block_resource:1>,null,null,null,null,null],
[<avaritia:block_resource:1>,<avaritia:block_resource:1>,<avaritia:block_resource:1>,<avaritia:block_resource:1>,<avaritia:block_resource:1>,null,null,null,null],
[<avaritia:block_resource:1>,<avaritia:block_resource:1>,null,<avaritia:block_resource:1>,null,null,null,null,null]]);

# Bag of Truth and Key to Infinity tooltips
<contenttweaker:bag_of_truth_locked>.addTooltip(format.red(format.bold("LOCKED")));
<contenttweaker:bag_of_truth_locked>.addTooltip(format.red("Requires a ") + format.lightPurple(format.bold("Key to Infinity")) + format.red(" to open."));
<contenttweaker:bag_of_truth_locked>.addTooltip(format.red("(This is the entire goal of the modpack.)"));
<contenttweaker:bag_of_truth_locked>.addTooltip(format.darkRed(format.italic("This is craftable, if you ever lose it.")));
<contenttweaker:bag_of_truth_locked>.addTooltip(format.darkRed(format.italic("Warning: Crafting deletes the input bag's inventory.")));
<contenttweaker:key_to_infinity>.addTooltip(format.red("Craft together with a ") + format.lightPurple(format.bold("Bag of Truth (Locked)")) + format.red(" to open it!"));

# Glyphs
val glyphs = [<contenttweaker:glyph_route>,<contenttweaker:glyph_bag>,<contenttweaker:glyph_tent>,<contenttweaker:glyph_waterfall>,<contenttweaker:glyph_tongue>,<contenttweaker:glyph_scythe>,<contenttweaker:glyph_blockade>,<contenttweaker:glyph_lash>,<contenttweaker:glyph_slash>,<contenttweaker:glyph_rod>,<contenttweaker:glyph_split>,<contenttweaker:glyph_shield>,<contenttweaker:glyph_war>,<contenttweaker:glyph_cross>,<contenttweaker:glyph_stamp>,<contenttweaker:glyph_connection>,<contenttweaker:glyph_fork>,<contenttweaker:glyph_wave>,<contenttweaker:glyph_lightning>,<contenttweaker:glyph_pair>,<contenttweaker:glyph_fish>,<contenttweaker:glyph_weaving>,<contenttweaker:glyph_stand>,<contenttweaker:glyph_lion>,<contenttweaker:glyph_mirror>,<contenttweaker:glyph_electricity>] as IItemStack[];
val glyph_inputs = [<contenttweaker:essence_of_ways>,<projecte:item.pe_alchemical_bag:14>,<totemic:tipi>,<mysticalagriculture:watering_can:4>,<bewitchment:tongue_of_dog>,<mysticalagriculture:supremium_scythe>,<extrautils2:compressedcobblestone:7>,<bewitchment:hellhound_horn>,<divinerpg:sandslash>,<lightningcraft:rod:9>,<contenttweaker:highly_radioactive_dimension_splitting_compound>,<spartanshields:shield_tc_void>,<avaritia:infinity_sword>,<rftoolsdim:dimensional_cross_block>,<openblocks:stencil>,<actuallyadditions:item_phantom_connector>,<agricraft:rake:1>,<contenttweaker:aquasalus>,<contenttweaker:lightning_charge>,<draconicevolution:dislocator_bound:1>,<minecraft:fish>,<botania:manaresource:22>,<minecraft:armor_stand>,<erebus:antlion_egg>,<thaumicaugmentation:impetus_mirror>,<extendedcrafting:singularity_custom:103>] as IItemStack[];
for i in 0 to 26 {
	recipes.addShapeless(glyphs[i], [<mysticalagradditions:stuff:69>,glyph_inputs[i]]);
}

# IT1
recipes.addHiddenShaped("it1", <contenttweaker:it1>, [[<contenttweaker:glyph_fork>, <contenttweaker:glyph_lash>, <contenttweaker:glyph_lash>],[<contenttweaker:glyph_fish>, <contenttweaker:glyph_pair>, <contenttweaker:glyph_scythe>],[<contenttweaker:glyph_tent>, <contenttweaker:glyph_wave>, null]]);
mods.jei.JEI.hide(<contenttweaker:it1>);

# IT2
recipes.addHiddenShaped("it2", <contenttweaker:it2>, [[<contenttweaker:glyph_tongue>, <contenttweaker:glyph_shield>, <contenttweaker:glyph_fish>],[<contenttweaker:glyph_fish>, <contenttweaker:glyph_waterfall>, null],[null, null, null]]);
mods.jei.JEI.hide(<contenttweaker:it2>);

# IT3
recipes.addHiddenShaped("it3", <contenttweaker:it3>, [[<contenttweaker:glyph_wave>,<contenttweaker:glyph_fork>,<contenttweaker:glyph_mirror>],[<contenttweaker:glyph_wave>,<contenttweaker:glyph_fork>,<contenttweaker:glyph_mirror>],[<contenttweaker:glyph_wave>,<contenttweaker:glyph_fork>,<contenttweaker:glyph_mirror>]]);
mods.jei.JEI.hide(<contenttweaker:it3>);

# IT4
recipes.addHiddenShaped("it4", <contenttweaker:it4>, [[<contenttweaker:glyph_tent>,<contenttweaker:glyph_shield>,<contenttweaker:glyph_lash>],[<contenttweaker:glyph_lash>,<contenttweaker:glyph_shield>,<contenttweaker:glyph_tent>],[<contenttweaker:glyph_tent>,<contenttweaker:glyph_shield>,<contenttweaker:glyph_lash>]]);
mods.jei.JEI.hide(<contenttweaker:it4>);

# IT5
mods.biggercraftingtables.Giant.addShaped(<contenttweaker:it5>,
[[<contenttweaker:puzzle_tile_gbbgr>, <contenttweaker:puzzle_tile_gbggr>, <contenttweaker:puzzle_tile_gbgog>, <contenttweaker:puzzle_tile_obgoo>, <contenttweaker:puzzle_tile_obooo>, <contenttweaker:puzzle_tile_obokr>, <contenttweaker:puzzle_tile_kbokk>, <contenttweaker:puzzle_tile_kbkkr>, <contenttweaker:puzzle_tile_kbkbk>], 
[<contenttweaker:puzzle_tile_rgbrr>, <contenttweaker:puzzle_tile_rgrgg>, <contenttweaker:puzzle_tile_ggror>, <contenttweaker:puzzle_tile_oogoo>, <contenttweaker:puzzle_tile_oooro>, <contenttweaker:puzzle_tile_rookr>, <contenttweaker:puzzle_tile_kkrrr>, <contenttweaker:puzzle_tile_rkkkk>, <contenttweaker:puzzle_tile_kkrbr>], 
[<contenttweaker:puzzle_tile_rrbgr>, <contenttweaker:puzzle_tile_grrrg>, <contenttweaker:puzzle_tile_rggor>, <contenttweaker:puzzle_tile_ooroo>, <contenttweaker:puzzle_tile_oooro>, <contenttweaker:puzzle_tile_rrorr>, <contenttweaker:puzzle_tile_rkrkk>, <contenttweaker:puzzle_tile_krrrk>, <contenttweaker:puzzle_tile_rkkbr>], 
[<contenttweaker:puzzle_tile_rrbgr>, <contenttweaker:puzzle_tile_ggrrg>, <contenttweaker:puzzle_tile_rrgor>, <contenttweaker:puzzle_tile_ooroo>, <contenttweaker:puzzle_tile_oooro>, <contenttweaker:puzzle_tile_rrokr>, <contenttweaker:puzzle_tile_krrkk>, <contenttweaker:puzzle_tile_kkkrr>, <contenttweaker:puzzle_tile_rrkbk>], 
[<contenttweaker:puzzle_tile_rrbgr>, <contenttweaker:puzzle_tile_ggrrg>, <contenttweaker:puzzle_tile_rrgor>, <contenttweaker:puzzle_tile_ooroo>, <contenttweaker:puzzle_tile_oooro>, <contenttweaker:puzzle_tile_rrokr>, <contenttweaker:puzzle_tile_kkrrr>, <contenttweaker:puzzle_tile_rkkkk>, <contenttweaker:puzzle_tile_krrbk>], 
[<contenttweaker:puzzle_tile_rrbgr>, <contenttweaker:puzzle_tile_ggrrg>, <contenttweaker:puzzle_tile_rrgor>, <contenttweaker:puzzle_tile_ooroo>, <contenttweaker:puzzle_tile_oooro>, <contenttweaker:puzzle_tile_rrorr>, <contenttweaker:puzzle_tile_rkrkr>, <contenttweaker:puzzle_tile_krrkk>, <contenttweaker:puzzle_tile_kkkbk>], 
[<contenttweaker:puzzle_tile_rrbgr>, <contenttweaker:puzzle_tile_ggrrr>, <contenttweaker:puzzle_tile_rrgog>, <contenttweaker:puzzle_tile_ooror>, <contenttweaker:puzzle_tile_ooorr>, <contenttweaker:puzzle_tile_rroro>, <contenttweaker:puzzle_tile_rrrkr>, <contenttweaker:puzzle_tile_kkrkr>, <contenttweaker:puzzle_tile_kkkbr>], 
[<contenttweaker:puzzle_tile_rrbrg>, <contenttweaker:puzzle_tile_rgrgg>, <contenttweaker:puzzle_tile_grrrg>, <contenttweaker:puzzle_tile_rogro>, <contenttweaker:puzzle_tile_roroo>, <contenttweaker:puzzle_tile_orrro>, <contenttweaker:puzzle_tile_rrork>, <contenttweaker:puzzle_tile_rkrrk>, <contenttweaker:puzzle_tile_rkrbk>], 
[<contenttweaker:puzzle_tile_grbgb>, <contenttweaker:puzzle_tile_grggb>, <contenttweaker:puzzle_tile_gggob>, <contenttweaker:puzzle_tile_orgob>, <contenttweaker:puzzle_tile_oroob>, <contenttweaker:puzzle_tile_oookb>, <contenttweaker:puzzle_tile_krokb>, <contenttweaker:puzzle_tile_krkkb>, <contenttweaker:puzzle_tile_krkbb>]]);
mods.jei.JEI.hideCategory("biggerct.big");
mods.jei.JEI.hideCategory("biggerct.huge");
mods.jei.JEI.hideCategory("biggerct.giant");
<biggercraftingtables:biggercraftingtable:2>.displayName = "Jigsaw Puzzle Crafting Table";

# Puzzle Pieces Backpack
val puzzle_pieces_backpack = <ironbackpacks:backpack>.withTag({packInfo: {upgrade: [], type: "ironbackpacks:diamond", spec: "STORAGE"}, RepairCost: 0, display: {Name: "§b§lPuzzle Pieces"}, packInv: [{id: "contenttweaker:puzzle_tile_oooro", Count: 5 as byte, Damage: 0 as short}, {id: "contenttweaker:puzzle_tile_rrbgr", Count: 5 as byte, Damage: 0 as short}, {id: "contenttweaker:puzzle_tile_ooroo", Count: 4 as byte, Damage: 0 as short}, {id: "contenttweaker:puzzle_tile_rrgor", Count: 3 as byte, Damage: 0 as short}, {id: "contenttweaker:puzzle_tile_ggrrg", Count: 3 as byte, Damage: 0 as short}, {id: "contenttweaker:puzzle_tile_rrorr", Count: 2 as byte, Damage: 0 as short}, {id: "contenttweaker:puzzle_tile_kkrrr", Count: 2 as byte, Damage: 0 as short}, {id: "contenttweaker:puzzle_tile_rkkkk", Count: 2 as byte, Damage: 0 as short}, {id: "contenttweaker:puzzle_tile_grrrg", Count: 2 as byte, Damage: 0 as short}, {id: "contenttweaker:puzzle_tile_krrkk", Count: 2 as byte, Damage: 0 as short}, {id: "contenttweaker:puzzle_tile_rrokr", Count: 2 as byte, Damage: 0 as short}, {id: "contenttweaker:puzzle_tile_rgrgg", Count: 2 as byte, Damage: 0 as short}, {id: "contenttweaker:puzzle_tile_ggror", Count: 1 as byte, Damage: 0 as short}, {id: "contenttweaker:puzzle_tile_oogoo", Count: 1 as byte, Damage: 0 as short}, {id: "contenttweaker:puzzle_tile_rookr", Count: 1 as byte, Damage: 0 as short}, {id: "contenttweaker:puzzle_tile_obgoo", Count: 1 as byte, Damage: 0 as short}, {id: "contenttweaker:puzzle_tile_gbgog", Count: 1 as byte, Damage: 0 as short}, {id: "contenttweaker:puzzle_tile_rrork", Count: 1 as byte, Damage: 0 as short}, {id: "contenttweaker:puzzle_tile_kbkkr", Count: 1 as byte, Damage: 0 as short}, {id: "contenttweaker:puzzle_tile_rggor", Count: 1 as byte, Damage: 0 as short}, {id: "contenttweaker:puzzle_tile_kbkbk", Count: 1 as byte, Damage: 0 as short}, {id: "contenttweaker:puzzle_tile_gbggr", Count: 1 as byte, Damage: 0 as short}, {id: "contenttweaker:puzzle_tile_rkrkk", Count: 1 as byte, Damage: 0 as short}, {id: "contenttweaker:puzzle_tile_krrrk", Count: 1 as byte, Damage: 0 as short}, {id: "contenttweaker:puzzle_tile_rkkbr", Count: 1 as byte, Damage: 0 as short}, {id: "contenttweaker:puzzle_tile_rgbrr", Count: 1 as byte, Damage: 0 as short}, {id: "contenttweaker:puzzle_tile_kbokk", Count: 1 as byte, Damage: 0 as short}, {id: "contenttweaker:puzzle_tile_obokr", Count: 1 as byte, Damage: 0 as short}, {id: "contenttweaker:puzzle_tile_gbbgr", Count: 1 as byte, Damage: 0 as short}, {id: "contenttweaker:puzzle_tile_obooo", Count: 1 as byte, Damage: 0 as short}, {id: "contenttweaker:puzzle_tile_rrkbk", Count: 1 as byte, Damage: 0 as short}, {id: "contenttweaker:puzzle_tile_krrbk", Count: 1 as byte, Damage: 0 as short}, {id: "contenttweaker:puzzle_tile_rkrkr", Count: 1 as byte, Damage: 0 as short}, {id: "contenttweaker:puzzle_tile_ggrrr", Count: 1 as byte, Damage: 0 as short}, {id: "contenttweaker:puzzle_tile_kkkrr", Count: 1 as byte, Damage: 0 as short}, {id: "contenttweaker:puzzle_tile_ooror", Count: 1 as byte, Damage: 0 as short}, {id: "contenttweaker:puzzle_tile_krkkb", Count: 1 as byte, Damage: 0 as short}, {id: "contenttweaker:puzzle_tile_rroro", Count: 1 as byte, Damage: 0 as short}, {id: "contenttweaker:puzzle_tile_rrrkr", Count: 1 as byte, Damage: 0 as short}, {id: "contenttweaker:puzzle_tile_kkrkr", Count: 1 as byte, Damage: 0 as short}, {id: "contenttweaker:puzzle_tile_roroo", Count: 1 as byte, Damage: 0 as short}, {id: "contenttweaker:puzzle_tile_orgob", Count: 1 as byte, Damage: 0 as short}, {id: "contenttweaker:puzzle_tile_grbgb", Count: 1 as byte, Damage: 0 as short}, {id: "contenttweaker:puzzle_tile_rkrbk", Count: 1 as byte, Damage: 0 as short}, {id: "contenttweaker:puzzle_tile_rkrrk", Count: 1 as byte, Damage: 0 as short}, {id: "contenttweaker:puzzle_tile_orrro", Count: 1 as byte, Damage: 0 as short}, {id: "contenttweaker:puzzle_tile_kkkbr", Count: 1 as byte, Damage: 0 as short}, {id: "contenttweaker:puzzle_tile_rrgog", Count: 1 as byte, Damage: 0 as short}, {id: "contenttweaker:puzzle_tile_grggb", Count: 1 as byte, Damage: 0 as short}, {id: "contenttweaker:puzzle_tile_krokb", Count: 1 as byte, Damage: 0 as short}, {id: "contenttweaker:puzzle_tile_rrbrg", Count: 1 as byte, Damage: 0 as short}, {id: "contenttweaker:puzzle_tile_oookb", Count: 1 as byte, Damage: 0 as short}, {id: "contenttweaker:puzzle_tile_gggob", Count: 1 as byte, Damage: 0 as short}, {id: "contenttweaker:puzzle_tile_ooorr", Count: 1 as byte, Damage: 0 as short}, {id: "contenttweaker:puzzle_tile_krkbb", Count: 1 as byte, Damage: 0 as short}, {id: "contenttweaker:puzzle_tile_kkrbr", Count: 1 as byte, Damage: 0 as short}, {id: "contenttweaker:puzzle_tile_rogro", Count: 1 as byte, Damage: 0 as short}, {id: "contenttweaker:puzzle_tile_oroob", Count: 1 as byte, Damage: 0 as short}, {id: "contenttweaker:puzzle_tile_kkkbk", Count: 1 as byte, Damage: 0 as short}, {id: "minecraft:air", Count: 2 as byte, Damage: 0 as short}, {id: "minecraft:air", Count: 2 as byte, Damage: 0 as short}, {id: "minecraft:air", Count: 2 as byte, Damage: 0 as short}, {id: "minecraft:air", Count: 2 as byte, Damage: 0 as short}, {id: "minecraft:air", Count: 2 as byte, Damage: 0 as short}, {id: "minecraft:air", Count: 2 as byte, Damage: 0 as short}, {id: "minecraft:air", Count: 2 as byte, Damage: 0 as short}, {id: "minecraft:air", Count: 2 as byte, Damage: 0 as short}, {id: "minecraft:air", Count: 2 as byte, Damage: 0 as short}, {id: "minecraft:air", Count: 2 as byte, Damage: 0 as short}, {id: "minecraft:air", Count: 2 as byte, Damage: 0 as short}, {id: "minecraft:air", Count: 2 as byte, Damage: 0 as short}, {id: "minecraft:air", Count: 2 as byte, Damage: 0 as short}, {id: "minecraft:air", Count: 2 as byte, Damage: 0 as short}, {id: "minecraft:air", Count: 2 as byte, Damage: 0 as short}, {id: "minecraft:air", Count: 2 as byte, Damage: 0 as short}, {id: "minecraft:air", Count: 2 as byte, Damage: 0 as short}, {id: "minecraft:air", Count: 2 as byte, Damage: 0 as short}]}) as IItemStack;
recipes.addShaped(puzzle_pieces_backpack, [[<contenttweaker:essence_of_thought>,<contenttweaker:creative_singularity>,<contenttweaker:essence_of_thought>],[<contenttweaker:creative_singularity>,<ironbackpacks:backpack>.withTag({packInfo: {upgrade: [], type: "ironbackpacks:diamond", spec: "STORAGE"}}),<contenttweaker:creative_singularity>],[<contenttweaker:essence_of_thought>,<contenttweaker:creative_singularity>,<contenttweaker:essence_of_thought>]]);
mods.jei.JEI.addItem(puzzle_pieces_backpack);

# Corrupted Key to Infinity
recipes.addHiddenShaped("ckoi", <contenttweaker:corrupted_key_to_infinity>, [[<contenttweaker:key_to_infinity>,<contenttweaker:it5>,<contenttweaker:key_to_infinity>],[<contenttweaker:it4>,<contenttweaker:it3>,<contenttweaker:it2>],[<contenttweaker:key_to_infinity>,<contenttweaker:it1>,<contenttweaker:key_to_infinity>]]);
mods.jei.JEI.hide(<contenttweaker:corrupted_key_to_infinity>);

# Encoded Bag of Corrupted Truth
val bag_of_corrupted_truth = <extrautils2:bagofholding>.withTag({display: {Lore: ["§c§lUNLOCKED"], Name: "§4§lBag of ᚨᛗᚣᚨᚢ"}, Items: {B: [8, 29, 98, 108, 111, 111, 100, 109, 97, 103, 105, 99, 58, 105, 116, 101, 109, 95, 100, 101, 109, 111, 110, 95, 99, 114, 121, 115, 116, 97, 108] as byte[] as byte[], C: [8, 3, 119, 101, 98] as byte[] as byte[], H: [8, 23, 98, 101, 119, 105, 116, 99, 104, 109, 101, 110, 116, 58, 100, 101, 109, 111, 110, 95, 104, 101, 97, 114, 116] as byte[] as byte[], I: [8, 29, 98, 108, 111, 111, 100, 109, 97, 103, 105, 99, 58, 105, 116, 101, 109, 95, 100, 101, 109, 111, 110, 95, 99, 114, 121, 115, 116, 97, 108] as byte[] as byte[], J: [8, 26, 98, 101, 119, 105, 116, 99, 104, 109, 101, 110, 116, 58, 104, 101, 108, 108, 104, 111, 117, 110, 100, 95, 104, 111, 114, 110] as byte[] as byte[], K: [8, 3, 119, 101, 98] as byte[] as byte[], L: [8, 26, 98, 101, 119, 105, 116, 99, 104, 109, 101, 110, 116, 58, 100, 101, 109, 111, 110, 105, 99, 95, 101, 108, 105, 120, 105, 114] as byte[] as byte[], M: [9, 29, 98, 108, 111, 111, 100, 109, 97, 103, 105, 99, 58, 105, 116, 101, 109, 95, 100, 101, 109, 111, 110, 95, 99, 114, 121, 115, 116, 97, 108, 0, 3] as byte[] as byte[], N: [8, 3, 119, 101, 98] as byte[] as byte[], P: [8, 26, 98, 101, 119, 105, 116, 99, 104, 109, 101, 110, 116, 58, 104, 101, 108, 108, 104, 111, 117, 110, 100, 95, 104, 111, 114, 110] as byte[] as byte[], Q: [8, 3, 119, 101, 98] as byte[] as byte[], R: [9, 29, 98, 108, 111, 111, 100, 109, 97, 103, 105, 99, 58, 105, 116, 101, 109, 95, 100, 101, 109, 111, 110, 95, 99, 114, 121, 115, 116, 97, 108, 0, 3] as byte[] as byte[], a: [8, 26, 98, 101, 119, 105, 116, 99, 104, 109, 101, 110, 116, 58, 104, 101, 108, 108, 104, 111, 117, 110, 100, 95, 104, 111, 114, 110] as byte[] as byte[], f: [8, 29, 98, 108, 111, 111, 100, 109, 97, 103, 105, 99, 58, 105, 116, 101, 109, 95, 100, 101, 109, 111, 110, 95, 99, 114, 121, 115, 116, 97, 108] as byte[] as byte[], g: [8, 26, 98, 101, 119, 105, 116, 99, 104, 109, 101, 110, 116, 58, 100, 101, 109, 111, 110, 105, 99, 95, 101, 108, 105, 120, 105, 114] as byte[] as byte[], h: [9, 29, 98, 108, 111, 111, 100, 109, 97, 103, 105, 99, 58, 105, 116, 101, 109, 95, 100, 101, 109, 111, 110, 95, 99, 114, 121, 115, 116, 97, 108, 0, 3] as byte[] as byte[], i: [8, 26, 98, 101, 119, 105, 116, 99, 104, 109, 101, 110, 116, 58, 100, 101, 109, 111, 110, 105, 99, 95, 101, 108, 105, 120, 105, 114] as byte[] as byte[], j: [8, 3, 119, 101, 98] as byte[] as byte[], m: [10, 12, 119, 114, 105, 116, 116, 101, 110, 95, 98, 111, 111, 107, 1, -36, 31, -117, 8, 0, 0, 0, 0, 0, 0, 0, -115, 83, -63, 74, -61, 64, 16, 93, 17, -91, 122, -16, -20, 49, -26, 92, -118, -120, 32, 120, -15, -20, 63, -12, -30, -95, -88, 80, 84, 52, -126, 32, -98, 53, -11, 3, 10, -69, 24, 74, -45, -44, 80, -102, -98, 115, -56, -55, 63, -39, 63, 113, -26, -51, -90, 27, 35, -120, -112, -110, 116, -25, -67, -103, 55, 111, 102, 119, -107, -38, 81, 91, 119, 23, -105, -125, -121, -114, 82, 106, 115, 35, 127, 14, -93, -63, 83, 20, -98, -122, -42, -116, -84, 73, 2, -85, 39, -12, -78, 58, -19, 63, 30, 30, 30, -99, 88, 51, -74, -70, -94, -45, -110, 79, -7, 121, -75, 38, -74, 38, -75, 122, 73, -89, 43, 28, -115, -23, 43, -73, 122, 42, -56, -126, 94, -42, -52, 24, -29, -111, -100, 114, 37, 105, 98, -90, -23, -22, 44, 0, -125, -62, -45, 46, -59, 99, -6, -67, 11, 77, -78, 85, 12, -42, -91, 23, 84, 23, 33, -116, -50, 15, -6, 55, -3, -101, 70, -56, 44, -22, -86, -81, -112, 0, 89, 76, 96, 52, 21, 29, 5, -114, 106, 62, -96, -110, -29, 41, 42, 76, -42, 127, 42, 84, 96, 90, -6, 71, 39, 12, 73, 80, -112, 35, 35, -47, -22, 85, -118, 27, -66, -51, 64, -88, 107, -15, 49, -76, 48, 91, 20, -110, -126, -84, -41, -21, 73, 59, -110, 26, 60, 60, -103, 19, 113, 16, -66, 108, -20, 53, 38, -75, 88, -5, -48, -3, -31, 79, 38, -83, -72, -47, -23, -68, -47, 16, -108, -70, 116, -127, 107, -118, -104, -34, -86, -118, 84, -100, 65, -122, 120, 9, -9, -69, -50, -39, -26, 112, 56, 83, -123, 118, 114, -128, -86, 86, 111, -46, 60, -19, 73, -61, -61, 84, -26, -123, 82, 84, -89, 5, 50, 111, 0, 37, -8, 40, -101, 2, 51, 1, 103, -88, 88, -72, 65, -103, 17, -5, 17, 122, 63, -12, -100, 59, 104, -116, -88, 88, 15, 51, 105, 13, -125, -96, -104, -8, 59, 60, 43, 64, -115, 91, -85, 58, -85, -29, -100, 84, -52, 123, -85, 87, -110, 38, 2, -47, -56, 82, -81, -126, 80, 87, 62, 19, -125, 39, -66, 9, -105, 115, 12, -34, 18, -21, 85, 34, 56, -106, -117, 81, -54, -92, 37, -72, -84, -73, -63, -77, -31, 73, 61, -50, -6, -102, -51, 101, 1, -102, 83, -104, -69, 28, -48, 65, 30, 117, -44, -10, -59, 99, 116, 117, 123, -81, -10, -95, -86, -8, 113, 51, -80, 20, 29, -75, 21, 93, 71, -61, -127, 58, -1, -6, 60, -2, -6, 28, -2, -5, 34, -1, 94, 119, -36, 44, 74, -87, -66, 1, 39, -65, -123, -81, 101, 4, 0, 0] as byte[] as byte[], "0": [9, 29, 98, 108, 111, 111, 100, 109, 97, 103, 105, 99, 58, 105, 116, 101, 109, 95, 100, 101, 109, 111, 110, 95, 99, 114, 121, 115, 116, 97, 108, 0, 3] as byte[] as byte[], p: [8, 3, 119, 101, 98] as byte[] as byte[], "1": [8, 23, 98, 101, 119, 105, 116, 99, 104, 109, 101, 110, 116, 58, 100, 101, 109, 111, 110, 95, 104, 101, 97, 114, 116] as byte[] as byte[], "2": [8, 3, 119, 101, 98] as byte[] as byte[], t: [9, 29, 98, 108, 111, 111, 100, 109, 97, 103, 105, 99, 58, 105, 116, 101, 109, 95, 100, 101, 109, 111, 110, 95, 99, 114, 121, 115, 116, 97, 108, 0, 3] as byte[] as byte[], "6": [8, 3, 119, 101, 98] as byte[] as byte[], "7": [8, 26, 98, 101, 119, 105, 116, 99, 104, 109, 101, 110, 116, 58, 104, 101, 108, 108, 104, 111, 117, 110, 100, 95, 104, 111, 114, 110] as byte[] as byte[], "8": [8, 3, 119, 101, 98] as byte[] as byte[], "9": [8, 3, 119, 101, 98] as byte[] as byte[], z: [8, 3, 119, 101, 98] as byte[] as byte[]}}) as IItemStack;
recipes.addHiddenShapeless("boct", bag_of_corrupted_truth, [<contenttweaker:bag_of_truth_locked>, <contenttweaker:corrupted_key_to_infinity>]);

# Call of the Underworld
mods.jei.JEI.hide(<contenttweaker:call_of_the_underworld>);
<contenttweaker:call_of_the_underworld>.addTooltip(format.darkRed("Dropped by Immortus."));

# Heaven's Cleansing
recipes.addHiddenShapeless("hc", <contenttweaker:heavens_cleansing>, [<contenttweaker:call_of_the_underworld>,<contenttweaker:essence_of_the_contrary>]);
mods.jei.JEI.hide(<contenttweaker:heavens_cleansing>);

# Heavenly Key to Infinity
recipes.addHiddenShapeless("hkti", <contenttweaker:heavenly_key_to_infinity>, [<contenttweaker:corrupted_key_to_infinity>,<contenttweaker:heavens_cleansing>]);
mods.jei.JEI.hide(<contenttweaker:heavenly_key_to_infinity>);

# SI
recipes.addHiddenShapeless("si", <contenttweaker:si>, [<minecraft:egg>,<contenttweaker:corrupted_key_to_infinity>]);
mods.jei.JEI.hide(<contenttweaker:si>);

# Encoded Bag of Truth (Real)
val bag_of_truth_real = <extrautils2:bagofholding>.withTag({display: {Lore: ["§c§lUNLOCKED"], Name: "§b§lBag of Truth"}, Items: {m: [10, 12, 119, 114, 105, 116, 116, 101, 110, 95, 98, 111, 111, 107, 3, -121, 31, -117, 8, 0, 0, 0, 0, 0, 0, 0, 101, 84, 61, -113, -36, 54, 20, -108, 11, 7, 23, 23, 41, -46, -91, 123, -69, -99, -127, -51, -62, 112, -118, 0, 110, 14, 119, 112, 12, -97, 97, -5, -128, -60, -127, 113, -56, 54, 92, -23, -83, 68, 47, 69, -54, 36, 117, -78, 98, -72, 13, -110, 31, -112, -33, 112, -65, 33, -83, 127, -103, -25, -111, 39, -19, -6, -46, 73, -4, -104, 55, 51, 111, 30, 31, 20, -59, -73, -59, -3, 78, -43, 28, 78, -118, -94, -8, -82, -8, -29, -29, 50, -14, -121, -72, 124, -78, -68, 108, 86, 84, 54, -38, 84, -117, -115, -35, -40, -73, -115, -118, -44, -88, 107, -90, -47, -11, 84, 59, -53, 20, 27, -17, -6, -70, 57, 77, -5, 23, 20, 56, -17, -91, 67, -95, -33, -19, -40, 115, 69, 108, -27, -52, 122, -67, 94, 44, 63, 21, 127, -51, -32, -49, -43, -75, -74, -75, -100, -9, -44, 114, -21, -68, -26, 64, 21, 27, -114, -72, -93, 108, 69, 33, 42, 31, -27, -120, 34, -53, 3, 25, -67, 99, -46, 22, 53, -103, 6, 112, 98, 111, 57, 4, -127, -107, -30, -25, 125, 76, -91, 85, -91, 58, 0, -84, 101, -19, 106, -94, -94, -128, -27, 29, -112, 66, -89, -67, -114, 107, -16, -8, 103, -26, 113, 37, 4, -94, -10, -88, 28, 2, 36, 40, 95, 54, -92, 3, -19, -76, 85, -58, -116, -28, -82, -39, 47, -24, -100, 75, -43, 7, 81, 12, 77, -78, -83, 64, 90, 89, -48, 75, -91, -34, -4, 111, -103, -94, -53, -38, -124, -9, 74, -2, 24, 64, 35, 92, -37, -12, -113, 30, 61, -2, 57, -92, 13, -79, -28, -3, 76, 5, 40, 84, -71, 50, 58, 79, -125, 10, -76, -41, -74, -6, -79, 1, 33, 8, 90, -111, -56, -58, -94, -25, -60, -86, 52, 46, 112, 42, -3, 12, -89, 82, 61, 28, -104, 106, -69, -35, -95, -74, -80, 74, 63, 21, 7, -40, 57, -118, -6, -1, -26, -110, 79, 19, 75, 32, -37, 40, 28, -115, -122, 93, 59, -44, 23, -76, 45, -57, -56, -66, 101, 108, 1, -80, -23, 91, -128, -57, -15, 84, -118, -34, -71, -74, -27, -46, -75, -72, -88, 90, -41, -61, -61, -125, 86, -48, 45, 93, 109, -11, -97, 124, 75, -62, -86, -106, -113, 17, -126, 110, 59, -56, -103, -128, -40, -66, 115, -29, 17, 119, 44, 9, -109, 93, 111, -48, -99, 120, 10, -22, -81, -113, 27, -105, -83, -12, -87, 45, 36, -27, -122, -58, 65, 103, -87, -95, 53, -103, 115, 105, 1, 126, 117, -7, 59, -107, -50, 34, 2, 38, 67, -69, -63, -126, 107, 100, -79, -30, -33, 99, 60, 42, -107, -123, 24, -60, 111, -116, -115, -12, -106, -50, -116, 17, -15, -126, -81, -74, -120, -62, 98, 10, -42, 32, 13, -121, 83, -79, -73, 64, -70, 13, 121, -10, -126, -74, -50, 91, -119, -86, 66, -39, 30, 117, -57, -108, -25, -68, 0, 55, 123, 44, 12, 41, 48, -55, -90, 84, 73, -70, -44, -71, 16, -12, -42, 36, 90, 127, 31, -26, -60, 13, 8, 5, 93, -48, -34, -30, 43, 98, 8, -109, 127, 27, -117, -24, -25, -113, -73, 108, -52, 74, -108, 101, 59, -48, 65, 116, -93, -53, -125, 4, -16, 64, -83, -85, 58, 85, -18, 87, -46, 25, 49, -67, 98, -124, 91, 71, -122, 55, 105, 62, -90, -24, 4, -31, 95, 59, -40, -19, 37, -25, 40, 0, 38, -65, 30, -59, 83, -121, -81, 35, 85, 54, -54, -106, -87, 75, -99, 119, -7, 97, -16, -127, -51, 46, -71, -12, 75, -22, -91, -114, 119, -102, 40, -111, -65, -7, 42, -14, 65, -115, 57, -64, 120, 95, 54, 75, 29, -89, 1, -127, -31, -104, 106, -71, -6, 14, -72, -106, -57, 21, 89, -105, 23, 114, -106, 85, -44, -50, 110, -106, -108, 36, 74, 10, 124, 47, 98, -48, 67, 81, 41, -66, -18, 111, 77, -110, -114, 37, -1, 6, 41, 114, 7, 97, 30, 23, -12, 6, -17, -64, 36, 81, -46, 54, 28, -46, -63, -86, 73, 38, 39, -100, 4, 122, -122, -90, 38, 59, 65, 34, 81, -114, 115, -114, 107, -114, -7, -87, 72, 7, 95, -125, -11, -56, 49, 125, -1, 54, -123, -4, 72, 23, 88, 105, -61, -73, -106, 42, 43, -82, -1, 52, 23, 126, -47, -121, 72, 42, 25, -98, 111, 78, 93, 125, -86, -15, -128, 50, -67, -56, 24, 98, -21, -29, -7, -46, 5, 53, -82, -101, 30, -29, 10, -42, 91, -22, -52, 100, 51, -109, -92, 97, 65, 79, 30, -30, -50, -43, 124, -25, 28, -114, 96, 94, 107, -27, -85, -80, 74, -6, -94, -41, -91, 11, -14, 41, -7, -59, -69, -109, -25, 76, -124, -123, -36, -82, -122, 77, 7, 62, -83, -38, 115, 38, 117, -108, -31, -109, -30, 27, -43, -57, -58, -7, -30, -5, 51, 91, -77, -63, -109, -22, 93, 75, -49, 25, -111, -77, 39, -59, -3, -88, -93, -31, -30, -121, -49, 55, -37, -49, 55, 70, 114, -16, -22, -16, 122, -67, 68, 11, -18, 21, 39, -98, -125, 51, -41, 92, -35, 43, -66, 0, 7, 47, 102, 54, -90, 6, 0, 0] as byte[] as byte[]}}) as IItemStack;
recipes.addHiddenShapeless("botr", bag_of_truth_real, [<contenttweaker:bag_of_truth_locked>,<contenttweaker:heavenly_key_to_infinity>]);

print("ENDING ContentTweakerBag.zs");